// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _3TeamProject.Models;

#nullable disable

namespace _3TeamProject.Migrations
{
    [DbContext(typeof(_3TeamProjectContext))]
    partial class _3TeamProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("_3TeamProject.Models.ActivitiesMessageBoard", b =>
                {
                    b.Property<int>("ActivitiesMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActivitiesMessageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivitiesMessageId"), 1L, 1);

                    b.Property<DateTime>("ActivitiesCreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ActivitiesMessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ActivitiesMessageState")
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int")
                        .HasColumnName("ActivityID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ActivitiesMessageId")
                        .HasName("PK_Activities\nMessageBoard");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivitiesMessageBoard", (string)null);
                });

            modelBuilder.Entity("_3TeamProject.Models.Administrator", b =>
                {
                    b.Property<int>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdministratorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdministratorId"), 1L, 1);

                    b.Property<string>("AdministratorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AdministratorStatusId")
                        .HasColumnType("int")
                        .HasColumnName("AdministratorStatusID");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AdministratorId");

                    b.HasIndex("AdministratorStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("_3TeamProject.Models.AdministratorStatusCategory", b =>
                {
                    b.Property<int>("AdministratorStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdministratorStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdministratorStatusId"), 1L, 1);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("AdministratorStatusId")
                        .HasName("PK__Administ__7EDF6BB32262A51C");

                    b.ToTable("AdministratorStatusCategory", (string)null);
                });

            modelBuilder.Entity("_3TeamProject.Models.JoinMember", b =>
                {
                    b.Property<int>("JoinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JoinID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JoinId"), 1L, 1);

                    b.Property<int>("ActivitiesId")
                        .HasColumnType("int")
                        .HasColumnName("ActivitiesID");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.HasKey("JoinId");

                    b.HasIndex("ActivitiesId");

                    b.HasIndex("MemberId");

                    b.ToTable("JoinMember", (string)null);
                });

            modelBuilder.Entity("_3TeamProject.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Age")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(datediff(year,[Birthday],getdate()))", false);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("CellPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MemberStatusId")
                        .HasColumnType("int")
                        .HasColumnName("MemberStatusID");

                    b.Property<string>("NickName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("MemberId");

                    b.HasIndex("MemberStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("_3TeamProject.Models.MemberStatusCategory", b =>
                {
                    b.Property<int>("MemberStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MemberStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberStatusId"), 1L, 1);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MemberStatusId")
                        .HasName("PK__MemberSt__53C4FDDCB6744793");

                    b.ToTable("MemberStatusCategory", (string)null);
                });

            modelBuilder.Entity("_3TeamProject.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("int")
                        .HasColumnName("AdministratorID");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ShipCity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ShipCountry")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("ShipDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ShipPostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ShipStatus")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("MemberId");

                    b.HasIndex("OrderStatus");

                    b.HasIndex("PaymentStatus");

                    b.HasIndex("ShipStatus");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("_3TeamProject.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("_3TeamProject.Models.OrderStatusCategory", b =>
                {
                    b.Property<int>("OrderCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderCategoryId"), 1L, 1);

                    b.Property<string>("OrderCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OrderCategoryId")
                        .HasName("PK_OrderStatus\nCategories");

                    b.ToTable("OrderStatusCategories");
                });

            modelBuilder.Entity("_3TeamProject.Models.PaymentStatusCategory", b =>
                {
                    b.Property<int>("PaymentCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentCategoryId"), 1L, 1);

                    b.Property<string>("PaymentCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentCategoryId")
                        .HasName("PK_PaymentStatus\nCategories");

                    b.ToTable("PaymentStatusCategories");
                });

            modelBuilder.Entity("_3TeamProject.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<DateTime?>("AddedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID");

                    b.Property<int?>("ProductHomePage")
                        .HasColumnType("int");

                    b.Property<string>("ProductIntroduce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProductRecommendation")
                        .HasColumnType("int");

                    b.Property<int?>("ProductStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ProductStatusID");

                    b.Property<decimal>("ProductUnitPrice")
                        .HasColumnType("money");

                    b.Property<string>("QuantityPerUnit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("RemovedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<int?>("UniOnOrder")
                        .HasColumnType("int");

                    b.Property<int?>("UnitStock")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductStatusId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("_3TeamProject.Models.ProductCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("_3TeamProject.Models.ProductsMessageBoard", b =>
                {
                    b.Property<int>("MessageBoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageBoardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageBoardId"), 1L, 1);

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<DateTime>("MessageCreatedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<string>("ProductMessageContent")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductMessageStatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("MessageBoardId")
                        .HasName("PK_Products\nMessageBoard");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsMessageBoard", (string)null);
                });

            modelBuilder.Entity("_3TeamProject.Models.ProductsPictureInfo", b =>
                {
                    b.Property<int>("ProductPictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductPictureID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductPictureId"), 1L, 1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<string>("ProductPictureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductPicturePath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductPictureId")
                        .HasName("PK_Products\nPictureInfo");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsPictureInfo", (string)null);
                });

            modelBuilder.Entity("_3TeamProject.Models.ProductStatusCategoy", b =>
                {
                    b.Property<int>("ProductStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductStatusId"), 1L, 1);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ProductStatusId")
                        .HasName("PK__ProductS__208205AB13BE0CE7");

                    b.ToTable("ProductStatusCategoy", (string)null);
                });

            modelBuilder.Entity("_3TeamProject.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("_3TeamProject.Models.ShipStatusCategory", b =>
                {
                    b.Property<int>("ShipCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShipCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipCategoryId"), 1L, 1);

                    b.Property<string>("ShipCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ShipCategoryId")
                        .HasName("PK_ShipStatus\nCategories");

                    b.ToTable("ShipStatusCategories");
                });

            modelBuilder.Entity("_3TeamProject.Models.Sightseeing", b =>
                {
                    b.Property<int>("SightseeingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SightseeingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SightseeingId"), 1L, 1);

                    b.Property<int>("AdministratorId")
                        .HasColumnType("int")
                        .HasColumnName("AdministratorID");

                    b.Property<string>("SightseeingAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SightseeingCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SightseeingCategoryID");

                    b.Property<string>("SightseeingCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SightseeingCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SightseeingHomePage")
                        .HasColumnType("int");

                    b.Property<string>("SightseeingIntroduce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SightseeingName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("SightseeingScore")
                        .HasColumnType("float");

                    b.HasKey("SightseeingId");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("SightseeingCategoryId");

                    b.ToTable("Sightseeing", (string)null);
                });

            modelBuilder.Entity("_3TeamProject.Models.SightseeingCategory", b =>
                {
                    b.Property<int>("SightseeingCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SightseeingCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SightseeingCategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SightseeingCategoryId");

                    b.ToTable("SightseeingCategories");
                });

            modelBuilder.Entity("_3TeamProject.Models.SightseeingMessageBoard", b =>
                {
                    b.Property<int>("MessageBoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageBoardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageBoardId"), 1L, 1);

                    b.Property<DateTime>("MessageCreatedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("SightseeingId")
                        .HasColumnType("int")
                        .HasColumnName("SightseeingID");

                    b.Property<string>("SightseeingMessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SightseeingStatusId")
                        .HasColumnType("int")
                        .HasColumnName("SightseeingStatusID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("MessageBoardId")
                        .HasName("PK_Sightseeing\nMessageBoard");

                    b.HasIndex("SightseeingId");

                    b.HasIndex("SightseeingStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("SightseeingMessageBoard", (string)null);
                });

            modelBuilder.Entity("_3TeamProject.Models.SightseeingMessageStatusCategory", b =>
                {
                    b.Property<int>("SightseeingStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SightseeingStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SightseeingStatusId"), 1L, 1);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SightseeingStatusId")
                        .HasName("PK__Sightsee__A82B64CABB66CBB3");

                    b.ToTable("SightseeingMessageStatusCategory", (string)null);
                });

            modelBuilder.Entity("_3TeamProject.Models.SightseeingPictureInfo", b =>
                {
                    b.Property<int>("SightseeingPictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SightseeingPictureID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SightseeingPictureId"), 1L, 1);

                    b.Property<int>("SightseeingId")
                        .HasColumnType("int")
                        .HasColumnName("SightseeingID");

                    b.Property<string>("SightseeingPictureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SightseeingPicturePath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SightseeingPictureId");

                    b.HasIndex("SightseeingId");

                    b.ToTable("SightseeingPictureInfo", (string)null);
                });

            modelBuilder.Entity("_3TeamProject.Models.SocialActivity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActivityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"), 1L, 1);

                    b.Property<DateTime>("ActitiesFinishDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ActitiesStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ActivitiesAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActivitiesContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivitiesName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int>("JoinCount")
                        .HasColumnType("int");

                    b.Property<int?>("LimitCount")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.HasKey("ActivityId");

                    b.HasIndex("MemberId");

                    b.ToTable("SocialActivities");
                });

            modelBuilder.Entity("_3TeamProject.Models.Supplier", b =>
                {
                    b.Property<int>("SuppliersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SuppliersID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuppliersId"), 1L, 1);

                    b.Property<string>("CellPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierCity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SupplierCountry")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SupplierPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SupplierPostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("SupplierStatusId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierStatusID");

                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnName("TaxID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SuppliersId");

                    b.HasIndex("SupplierStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("_3TeamProject.Models.SupplierStatusCategoy", b =>
                {
                    b.Property<int>("SupplierStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierStatusId"), 1L, 1);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SupplierStatusId")
                        .HasName("PK__Supplier__6F9CA1BBBB698C79");

                    b.ToTable("SupplierStatusCategoy", (string)null);
                });

            modelBuilder.Entity("_3TeamProject.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EMAIL");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varbinary(128)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varbinary(128)");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime");

                    b.Property<int?>("Roles")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerfiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("VerificationToken")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("UserId");

                    b.HasIndex("Roles");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("_3TeamProject.Models.ActivitiesMessageBoard", b =>
                {
                    b.HasOne("_3TeamProject.Models.SocialActivity", "Activity")
                        .WithMany("ActivitiesMessageBoards")
                        .HasForeignKey("ActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_Activities\nMessageBoard_SocialActivities");

                    b.HasOne("_3TeamProject.Models.User", "User")
                        .WithMany("ActivitiesMessageBoards")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ActivitiesMessageBoard_Users");

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_3TeamProject.Models.Administrator", b =>
                {
                    b.HasOne("_3TeamProject.Models.AdministratorStatusCategory", "AdministratorStatus")
                        .WithMany("Administrators")
                        .HasForeignKey("AdministratorStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Administrators_AdministratorStatusCategory");

                    b.HasOne("_3TeamProject.Models.User", "User")
                        .WithMany("Administrators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Adminstrators_Users");

                    b.Navigation("AdministratorStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_3TeamProject.Models.JoinMember", b =>
                {
                    b.HasOne("_3TeamProject.Models.SocialActivity", "Activities")
                        .WithMany("JoinMembers")
                        .HasForeignKey("ActivitiesId")
                        .IsRequired()
                        .HasConstraintName("FK_JoinMember_SocialActivities");

                    b.HasOne("_3TeamProject.Models.Member", "Member")
                        .WithMany("JoinMembers")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_JoinMember_Members");

                    b.Navigation("Activities");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("_3TeamProject.Models.Member", b =>
                {
                    b.HasOne("_3TeamProject.Models.MemberStatusCategory", "MemberStatus")
                        .WithMany("Members")
                        .HasForeignKey("MemberStatusId")
                        .HasConstraintName("FK_Members_MemberStatusCategory");

                    b.HasOne("_3TeamProject.Models.User", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Members_Users");

                    b.Navigation("MemberStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_3TeamProject.Models.Order", b =>
                {
                    b.HasOne("_3TeamProject.Models.Administrator", "Administrator")
                        .WithMany("Orders")
                        .HasForeignKey("AdministratorId")
                        .HasConstraintName("FK_Orders_Administrators");

                    b.HasOne("_3TeamProject.Models.Member", "Member")
                        .WithMany("Orders")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Members");

                    b.HasOne("_3TeamProject.Models.OrderStatusCategory", "OrderStatusNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatus")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_OrderStatus\nCategories");

                    b.HasOne("_3TeamProject.Models.PaymentStatusCategory", "PaymentStatusNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentStatus")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_PaymentStatus\nCategories");

                    b.HasOne("_3TeamProject.Models.ShipStatusCategory", "ShipStatusNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("ShipStatus")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_ShipStatus\nCategories");

                    b.Navigation("Administrator");

                    b.Navigation("Member");

                    b.Navigation("OrderStatusNavigation");

                    b.Navigation("PaymentStatusNavigation");

                    b.Navigation("ShipStatusNavigation");
                });

            modelBuilder.Entity("_3TeamProject.Models.OrderDetail", b =>
                {
                    b.HasOne("_3TeamProject.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetails_Orders");

                    b.HasOne("_3TeamProject.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetails_Products");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("_3TeamProject.Models.Product", b =>
                {
                    b.HasOne("_3TeamProject.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_ProductCategories");

                    b.HasOne("_3TeamProject.Models.ProductStatusCategoy", "ProductStatus")
                        .WithMany("Products")
                        .HasForeignKey("ProductStatusId")
                        .HasConstraintName("FK_Products_ProductStatusCategoy");

                    b.HasOne("_3TeamProject.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Products_Suppliers");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductStatus");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("_3TeamProject.Models.ProductsMessageBoard", b =>
                {
                    b.HasOne("_3TeamProject.Models.Member", "Member")
                        .WithMany("ProductsMessageBoards")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Products\nMessageBoard_Members");

                    b.HasOne("_3TeamProject.Models.Product", "Product")
                        .WithMany("ProductsMessageBoards")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Products\nMessageBoard_Products");

                    b.Navigation("Member");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("_3TeamProject.Models.ProductsPictureInfo", b =>
                {
                    b.HasOne("_3TeamProject.Models.Product", "Product")
                        .WithMany("ProductsPictureInfos")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Products\nPictureInfo_Products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("_3TeamProject.Models.Sightseeing", b =>
                {
                    b.HasOne("_3TeamProject.Models.Administrator", "Administrator")
                        .WithMany("Sightseeings")
                        .HasForeignKey("AdministratorId")
                        .IsRequired()
                        .HasConstraintName("FK_Sightseeing_Administrators");

                    b.HasOne("_3TeamProject.Models.SightseeingCategory", "SightseeingCategory")
                        .WithMany("Sightseeings")
                        .HasForeignKey("SightseeingCategoryId")
                        .HasConstraintName("FK_Sightseeing_SightseeingCategories");

                    b.Navigation("Administrator");

                    b.Navigation("SightseeingCategory");
                });

            modelBuilder.Entity("_3TeamProject.Models.SightseeingMessageBoard", b =>
                {
                    b.HasOne("_3TeamProject.Models.Sightseeing", "Sightseeing")
                        .WithMany("SightseeingMessageBoards")
                        .HasForeignKey("SightseeingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sightseeing\nMessageBoard_Sightseeing");

                    b.HasOne("_3TeamProject.Models.SightseeingMessageStatusCategory", "SightseeingStatus")
                        .WithMany("SightseeingMessageBoards")
                        .HasForeignKey("SightseeingStatusId")
                        .HasConstraintName("FK_Sightseeing\nMessageBoard_SightseeingStatusCategory");

                    b.HasOne("_3TeamProject.Models.User", "User")
                        .WithMany("SightseeingMessageBoards")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_SightseeingMessageBoard_Users");

                    b.Navigation("Sightseeing");

                    b.Navigation("SightseeingStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_3TeamProject.Models.SightseeingPictureInfo", b =>
                {
                    b.HasOne("_3TeamProject.Models.Sightseeing", "Sightseeing")
                        .WithMany("SightseeingPictureInfos")
                        .HasForeignKey("SightseeingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SightseeingPictureInfo_Sightseeing");

                    b.Navigation("Sightseeing");
                });

            modelBuilder.Entity("_3TeamProject.Models.SocialActivity", b =>
                {
                    b.HasOne("_3TeamProject.Models.Member", "Member")
                        .WithMany("SocialActivities")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_SocialActivities_Members");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("_3TeamProject.Models.Supplier", b =>
                {
                    b.HasOne("_3TeamProject.Models.SupplierStatusCategoy", "SupplierStatus")
                        .WithMany("Suppliers")
                        .HasForeignKey("SupplierStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Suppliers_SupplierStatusCategoy");

                    b.HasOne("_3TeamProject.Models.User", "User")
                        .WithMany("Suppliers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Suppliers_Users");

                    b.Navigation("SupplierStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_3TeamProject.Models.User", b =>
                {
                    b.HasOne("_3TeamProject.Models.Role", "RolesNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Roles")
                        .HasConstraintName("FK_Users_Roles1");

                    b.Navigation("RolesNavigation");
                });

            modelBuilder.Entity("_3TeamProject.Models.Administrator", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Sightseeings");
                });

            modelBuilder.Entity("_3TeamProject.Models.AdministratorStatusCategory", b =>
                {
                    b.Navigation("Administrators");
                });

            modelBuilder.Entity("_3TeamProject.Models.Member", b =>
                {
                    b.Navigation("JoinMembers");

                    b.Navigation("Orders");

                    b.Navigation("ProductsMessageBoards");

                    b.Navigation("SocialActivities");
                });

            modelBuilder.Entity("_3TeamProject.Models.MemberStatusCategory", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("_3TeamProject.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("_3TeamProject.Models.OrderStatusCategory", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("_3TeamProject.Models.PaymentStatusCategory", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("_3TeamProject.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductsMessageBoards");

                    b.Navigation("ProductsPictureInfos");
                });

            modelBuilder.Entity("_3TeamProject.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("_3TeamProject.Models.ProductStatusCategoy", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("_3TeamProject.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("_3TeamProject.Models.ShipStatusCategory", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("_3TeamProject.Models.Sightseeing", b =>
                {
                    b.Navigation("SightseeingMessageBoards");

                    b.Navigation("SightseeingPictureInfos");
                });

            modelBuilder.Entity("_3TeamProject.Models.SightseeingCategory", b =>
                {
                    b.Navigation("Sightseeings");
                });

            modelBuilder.Entity("_3TeamProject.Models.SightseeingMessageStatusCategory", b =>
                {
                    b.Navigation("SightseeingMessageBoards");
                });

            modelBuilder.Entity("_3TeamProject.Models.SocialActivity", b =>
                {
                    b.Navigation("ActivitiesMessageBoards");

                    b.Navigation("JoinMembers");
                });

            modelBuilder.Entity("_3TeamProject.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("_3TeamProject.Models.SupplierStatusCategoy", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("_3TeamProject.Models.User", b =>
                {
                    b.Navigation("ActivitiesMessageBoards");

                    b.Navigation("Administrators");

                    b.Navigation("Members");

                    b.Navigation("SightseeingMessageBoards");

                    b.Navigation("Suppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
