@{
    Layout = "_Backstage";
}

<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-1 mt-1">
            <div class="col-sm-6">
                <h1 class="m-0">商品清單</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="/backstage/dashboard">Home</a></li>
                    <li class="breadcrumb-item active">Products</li>
                </ol>
            </div>
        </div>
    </div>
</div>
<!-- /.content-header -->
<!-- Main content -->
<section class="content">
    <!-- Default box -->
    <div class="card">
        <div id="VueProductPage" class="card-body">
            @* <div class="float-sm-right">
                <a class="btn btn-primary btn-sm mx-1 mb-1" href="#" data-bs-toggle="modal"
                    data-bs-target="#addModal">新增商品</a>
            </div> *@
            <div class="float-sm-right">
                <a class="btn btn-primary btn-sm mx-1 mb-1" href="#" v-on:click="home"
                    v-if="homeVisible == true">首頁主打區設定</a>
            </div>
            <div class="float-sm-right">
                <a class="btn btn-primary btn-sm mx-1 mb-1" href="#" v-on:click="homeConfirm"
                    v-if="homeVisible == false">確認首頁主打區設定</a>
                <a class="btn btn-primary btn-sm mx-1 mb-1" href="#" v-on:click="closeHome"
                    v-if="homeVisible == false">取消主打區設定</a>

            </div>
            <div class="table-responsive text-nowrap">
                <table class="table table-bordered table-striped table-hover">
                    <thead>
                        <tr>
                            <th>商品編號</th>
                            <th>商品名稱</th>
                            <th>商品單位</th>
                            <th>商品單價</th>
                            <th>庫存數量</th>
                            <th>總訂購數量</th>
                            <th>上架時間</th>
                            <th>下架時間</th>
                            <th>商品狀態</th>
                            <th>商品推薦度</th>
                            <th>商品評價</th>
                            <th v-if="homeVisible == false">首頁設定</th>
                            <th>編輯</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="p in ProductsByPage" :key="p.productId">
                            <th>{{p.productId}}</th>
                            <th>{{p.productName}}</th>
                            <th>{{p.quantityPerUnit}}</th>
                            <th>$ {{p.productUnitPrice}}</th>
                            <th>{{p.unitStock}}</th>
                            <th>{{p.uniOnOrder}}</th>
                            <th>{{p.addedTime}}</th>
                            <th>{{p.removedTime}}</th>
                            <th>{{p.statusName}}</th>
                            <th>{{p.productRecommendation}}</th>
                            <th><a v-bind:href="'/Shop/ProductDetail?id='+ p.productId">評價</a></th>
                            <th v-if="homeVisible == false"><input type="checkbox" v-model="p.productHomePage"
                                    v-bind:true-value="0" v-bind:false-value="1"></th>
                            <td class="project-actions text-center">
                                <a class="btn btn-info btn-sm" href="#" data-bs-toggle="modal"
                                    data-bs-target="#editModal" v-on:click="editModal(p)"><i
                                        class="fas fa-pencil-alt"></i>修改</a>
                                <span v-if="approveVisible(p)">
                                    <a class="btn btn-primary btn-sm" href="#" v-on:click="onOffSaleSwitch(p)"
                                    v-if="visible(p)"><i class="fas fa-user-slash"></i>下架</a>
                                <a class="btn btn-success btn-sm" href="#" v-on:click="onOffSaleSwitch(p)"
                                    v-else="visible(p)"><i class="fas fa-user"></i>上架</a>
                                </span>
                                <span v-else="approveVisible(p)">
                                    <a class="btn btn-warning btn-sm" href="#" v-on:click="onOffSaleSwitch(p)"><i class="fas fa-user"></i>審核</a>
                                </span>
                                <a class="btn btn-danger btn-sm" href="#" v-on:click="deleteInfo(p)"><i
                                        class="fas fa-trash"></i>刪除</a>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <nav aria-label="..." v-if="pageVisible">
                    <ul class="pagination">
                        <li :class="{ 'disabled': currentPage === 1 }">
                            <a class="page-link" href="#" v-on:click.prevent="prevPage()">Previous</a>
                        </li>
                        <li v-for="page in totalPages" :key="page" :class="{ 'active': currentPage === page }">
                            <a class="page-link" href="#" v-on:click.prevent="changePage(page)">{{ page }}</a>
                        </li>
                        <li :class="{ 'disabled': currentPage === totalPages }">
                            <a class="page-link" href="#" v-on:click.prevent="nextPage()">Next</a>
                        </li>
                    </ul>
                </nav>
            </div>
            <!-- Modal New Add product -->
            @* <div class="modal fade" id="addModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
                aria-labelledby="staticBackdropLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="staticBackdropLabel">新增商品資料</h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                                v-on:click="closeAdd"></button>
                        </div>
                        <div class="modal-body">
                            <div class="row mb-1">
                                <label for="productName" class="col-sm-4">商品名稱 :</label>
                                <input id="productName" class="col-sm-5" type="text" v-model="addProduct.productName"
                                    placeholder="輸入商品名稱">
                            </div>
                            <div class="row mb-1">
                                <label for="quantityPerUnit" class="col-sm-4">商品單位 :</label>
                                <input id="quantityPerUnit" class="col-sm-5" type="text"
                                    v-model="addProduct.quantityPerUnit" placeholder="輸入商品單位">
                            </div>
                            <div class="row mb-1">
                                <label for="productUnitPrice" class="col-sm-4">商品單價 :</label>
                                <input id="productUnitPrice" class="col-sm-5" type="text"
                                    v-model="addProduct.productUnitPrice" placeholder="輸入商品單價">
                            </div>
                            <div class="row mb-1">
                                <label for="productQty" class="col-sm-4">商品數量 :</label>
                                <input id="productQty" class="col-sm-5" type="text"
                                    v-model="addProduct.productQty" placeholder="輸入新增商品數量">
                            </div>
                            <div class="row mb-1">
                                <label for="productIntroduce" class="col-sm-4">商品介紹 :</label>
                                <input id="productIntroduce" class="col-sm-5" type="text"
                                    v-model="addProduct.productIntroduce" placeholder="輸入新增商品介紹">
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
                                v-on:click="closeAdd">取消</button>
                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal"
                                v-on:click="createProduct">確認新增</button>
                        </div>
                    </div>
                </div>
            </div> *@

            <!-- Modal EditProduct-->
            <div class="modal fade" id="editModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
                aria-labelledby="staticBackdropLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="staticBackdropLabel">修改商品資料</h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                                v-on:click="close"></button>
                        </div>
                        <div class="modal-body" v-if="editProduct != null">
                            <div class="row mb-1">
                                <label class="col-sm-3">商品編號 :</label>
                                <label class="col-sm-6">{{editProduct.productId}}</label>
                            </div>
                            <div class="row mb-1">
                                <label for="editProductName" class="col-sm-3">商品名稱 :</label>
                                <input id="editProductName" class="col-sm-6" type="text"
                                    v-model="editProduct.productName">
                            </div>
                            <div class="row mb-1">
                                <label for="editQuantityPerUnit" class="col-sm-3">商品單位 :</label>
                                <input id="editQuantityPerUnit" class="col-sm-6" type="text"
                                    v-model="editProduct.quantityPerUnit" placeholder="輸入商品單位">
                            </div>
                            <div class="row mb-1">
                                <label for="editProductUnitPrice" class="col-sm-3">商品單價 :</label>
                                <input id="editProductUnitPrice" class="col-sm-6" type="text"
                                    v-model="editProduct.productUnitPrice" placeholder="輸入商品單價">
                            </div>
                            <div class="row mb-1">
                                <label for="editUnitStock" class="col-sm-3">庫存數量 :</label>
                                <input id="editUnitStock" class="col-sm-6" type="text" v-model="editProduct.unitStock"
                                    placeholder="輸入庫存數量">
                            </div>
                            <div class="row mb-1">
                                <label for="editProductIntroduce" class="col-sm-3">商品介紹 :</label>
                                <textarea id="editProductIntroduce" class="col-sm-6"
                                    v-model="editProduct.productIntroduce" placeholder="輸入新增商品介紹"></textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
                                v-on:click="close">取消</button>
                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal"
                                v-on:click="editinfo">確認修改</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- /.card-body -->
    </div>
    <!-- /.card -->

</section>
<!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Scripts{
    <script>
        var VueProductPage = new Vue({
            el: "#VueProductPage",
            data: {
                Products: [],
                @* addProduct: {
                    productName: '',
                    quantityPerUnit: '',
                    productUnitPrice: '',
                    productQty: '',
                    productIntroduce:'',
                }, *@
                editProduct: null,
                homeVisible: true,
                ErrMsg: '',
                Success: '',
                currentPage: 1,
                pageSize: 10,
                pageVisible: true,
            },
            mounted: function () {
                this.getAllProduct();
            },
            computed: {
                selectedItems() {
                    return this.Products.filter(p => p.productHomePage == "0")
                },
                totalPages() {
                    const total = Math.ceil(this.Products.length / this.pageSize)
                    if(total ===1){
                        this.pageVisible = false;
                    }
                    return total;
                },
                ProductsByPage() {
                    const startIndex = (this.currentPage - 1) * this.pageSize;
                    const endIndex = startIndex + this.pageSize;
                    return this.Products.slice(startIndex, endIndex);
                },
            },
            methods: {
                prevPage() {
                    if (this.currentPage > 1) {
                        this.changePage(this.currentPage - 1);
                    }
                },
                nextPage() {
                    if (this.currentPage < this.totalPages) {
                        this.changePage(this.currentPage + 1);
                    }
                },
                changePage(page) {
                    this.currentPage = page;
                },
                home: function () {
                    this.homeVisible = false;
                },
                closeHome: function () {
                    this.homeVisible = true;
                },
                homeConfirm: function () {
                    var self = this;
                    self.editProduct = self.selectedItems.map(p => p.productId);
                    axios({
                        method: 'put',
                        url: '/Administrators/AdministratorApi/UpdateProductHome',
                        data: self.editProduct,
                    })
                        .then(function (res) {
                            console.log(res);
                            self.Success = res.data;
                            self.editProduct = null;
                            self.homeVisible = true;
                            Swal.fire({
                                title: self.Success,
                                icon: 'success',
                                timer: 12000
                            });
                        })
                        .catch(function (error) {
                            console.log(error);
                            self.ErrMsg = error.response.data;
                            Swal.fire({
                                title: '設定失敗',
                                text: self.ErrMsg,
                                icon: 'error',
                                timer: 12000
                            });
                        });

                },
                getAllProduct: function () {
                    var self = this;
                    axios({
                        method: 'get',
                        url: '/Administrators/AdministratorApi/GetAllProduct'
                    })
                        .then(function (res) {
                            console.log(res);
                            self.Products = res.data;
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                },
                @* createProduct: function () {
                    var self = this;
                    axios({
                        method: 'post',
                        url: '/Administrators/AdministratorApi/Register',
                        data: addProduct,
                    })
                        .then(function (res) {
                            console.log(res);
                            self.Success = res.data;
                            self.getAllProduct();
                            self.addProduct = {
                                productName: '',
                                quantityPerUnit: '',
                                productUnitPrice: '',
                                addProductQty: '',
                            };
                            Swal.fire({
                                title: self.Success,
                                icon: 'success',
                                timer: 12000
                            });

                        })
                        .catch(function (error) {
                            console.log(error);
                            self.ErrMsg = error.response.data.errors;
                            var message = Object.values(error.response.data.errors).join('<br>');
                            Swal.fire({
                                title: '新增失敗',
                                text: `${message}`,
                                icon: 'error',
                                timer: 12000
                            });

                        });

                }, *@
                editModal: function (request) {
                    this.editProduct = { ...request };
                },
                editinfo: function () {
                    var self = this;
                    axios({
                        method: 'put',
                        url: `/Administrators/AdministratorApi/UpdateProduct/${self.editProduct.productId}`,
                        data: self.editProduct,
                    })
                        .then(function (res) {
                            console.log(res);
                            self.Success = res.data;
                            const index = self.Products.findIndex(m => m.productId === self.editProduct.productId);
                            self.Products.splice(index, 1, self.editProduct);
                            self.editProduct = null;
                            Swal.fire({
                                title: self.Success,
                                icon: 'success',
                                timer: 12000
                            });
                        })
                        .catch(function (error) {
                            console.log(error);
                            self.ErrMsg = error.response.data.errors;
                            var message = Object.values(error.response.data.errors).join('<br>');
                            Swal.fire({
                                title: '修改失敗',
                                text: `${message}`,
                                icon: 'error',
                                timer: 12000
                            });
                        });

                },
                visible: function (request) {
                    if (request.statusName == "上架中") {
                        return true;
                    }
                    return false;
                },
                approveVisible: function (request) {
                    if (request.statusName != "審核中") {
                        return true;
                    }
                    return false;
                },
                onOffSaleSwitch: function (request) {
                    var self = this;
                    var url = `/Administrators/AdministratorApi/UpdateProduct/${request.productId}`;
                    self.editProduct = { ...request };
                    if (request.statusName == "上架中") {
                        self.editProduct.productStatusId = 2;
                        this.switchSale("下架", "已下架", url, request);
                    } else if (request.statusName == "已下架") {
                        self.editProduct.productStatusId = 1;
                        this.switchSale("上架", "上架中", url, request);
                    } else if(request.statusName == "審核中"){
                        self.editProduct.productStatusId = 1;
                        this.switchSale("上架", "上架中", url, request);
                    }
                },
                switchSale: function (title, status, authUrl, request) {
                    var self = this;
                    Swal.fire({
                        title: `確認要${title}?`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: `是的, ${title}!`,
                        cancelButtonText: '取消!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            axios({
                                method: 'put',
                                url: authUrl,
                                data: self.editProduct,
                            }).then(function (res) {
                                console.log(res);
                                self.editProduct.statusName = status;
                                const index = self.Products.findIndex(m => m.productId === request.productId);
                                self.Products.splice(index, 1, self.editProduct);
                                self.editProduct = null;
                            })
                                .catch(function (error) {
                                    console.log(error);
                                    self.ErrMsg = error.response.data.errors;
                                    var message = Object.values(error.response.data.errors).join('<br>');
                                    Swal.fire({
                                        title: `${title}失敗`,
                                        text: `${message}`,
                                        icon: 'error',
                                        timer: 12000
                                    });
                                });
                            Swal.fire(
                                `${title}`,
                                `商品已${title}.`,
                                'success'
                            );
                        }
                    });
                },
                close: function () {
                    this.editProduct = null;
                },
                closeAdd: function () {
                    this.addProduct = {
                        productName: '',
                        quantityPerUnit: '',
                        productUnitPrice: '',
                        addProductQty: '',
                    };
                },
                deleteInfo: function (request) {
                    var self = this;
                    Swal.fire({
                        title: '確認要刪除?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: '是的, 刪除!',
                        cancelButtonText: '取消!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            axios({
                                method: 'delete',
                                url: `/Administrators/AdministratorApi/DeleteProduct/${request.productId}`
                            }).then(function (res) {
                                console.log(res);
                                const index = self.Products.findIndex(m => m.productId === request.productId);
                                self.Products.splice(index, 1);
                            })
                                .catch(function (error) {
                                    console.log(error);
                                });
                            Swal.fire(
                                '刪除!',
                                '資料已刪除.',
                                'success'
                            );
                        }
                    })
                }
            }
        });

    </script>
}

