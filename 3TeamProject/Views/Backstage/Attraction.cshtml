@{
    Layout = "_Backstage";
}

<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-1 mt-1">
            <div class="col-sm-6">
                <h1 class="m-0">景點清單</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="/backstage/dashboard">Home</a></li>
                    <li class="breadcrumb-item active">Attractions</li>
                </ol>
            </div>
        </div>
    </div>
</div>
<!-- /.content-header -->
<!-- Main content -->
<section class="content">
    <!-- Default box -->
    <div class="card">
        <div id="VueSightPage" class="card-body">
            <div class="float-sm-right">
                <a class="btn btn-primary btn-sm mb-1" href="#" data-bs-toggle="modal"
                    data-bs-target="#addModal">新增景點</a>
            </div>
            <div class="float-sm-right">
                <a class="btn btn-primary btn-sm mx-1 mb-1" href="#" v-on:click="home"
                    v-if="homeVisible == true">首頁主打區設定</a>
            </div>
            <div class="float-sm-right">
                <a class="btn btn-primary btn-sm mx-1 mb-1" href="#" v-on:click="confirmHome"
                    v-if="homeVisible == false">確認首頁主打區設定</a>
                <a class="btn btn-primary btn-sm mx-1 mb-1" href="#" v-on:click="closeHome"
                    v-if="homeVisible == false">取消主打區設定</a>
            </div>
            <div class="table-responsive text-nowrap">
                <table class="table table-bordered table-striped table-hover">
                    <thead>
                        <tr>
                            <th>景點編號</th>
                            <th>景點名稱</th>
                            <th>景點國家</th>
                            <th>景點城市</th>
                            <th>景點地址</th>
                            <th>景點推薦度</th>
                            <th>景點種類</th>
                            <th v-if="homeVisible == false">首頁設定</th>
                            <th>編輯</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="s in sightseeingByPage" :key="s.sightseeingId">
                            <td>{{s.sightseeingId}}</td>
                            <td>{{s.sightseeingName}}</td>
                            <td>{{s.sightseeingCountry}}</td>
                            <td>{{s.sightseeingCity}}</td>
                            <td>{{s.sightseeingAddress}}</td>
                            <td>{{s.sightseeingScore}}</td>
                            <td>{{s.categoryName}}</td>
                            <th v-if="homeVisible == false"><input type="checkbox" v-model="s.sightseeingHomePage"
                                    v-bind:true-value="0" v-bind:false-value="1"></th>
                            <td class="project-actions text-center">
                                <a class="btn btn-info btn-sm" href="#" data-bs-toggle="modal"
                                    data-bs-target="#editModal" v-on:click="editModal(s)"><i
                                        class="fas fa-pencil-alt"></i>修改</a>
                                <a class="btn btn-danger btn-sm" href="#" v-on:click="deleteInfo(s)"><i
                                        class="fas fa-trash"></i>刪除</a>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <nav aria-label="..." v-if="pageVisible">
                    <ul class="pagination">
                        <li :class="{ 'disabled': currentPage === 1 }">
                            <a class="page-link" href="#" v-on:click.prevent="prevPage()">Previous</a>
                        </li>
                        <li v-for="page in totalPages" :key="page" :class="{ 'active': currentPage === page }">
                            <a class="page-link" href="#" v-on:click.prevent="changePage(page)">{{ page }}</a>
                        </li>
                        <li :class="{ 'disabled': currentPage === totalPages }">
                            <a class="page-link" href="#" v-on:click.prevent="nextPage()">Next</a>
                        </li>
                    </ul>
                </nav>

            </div>
            <!-- Modal New Add Sightseeing -->
            <div class="modal fade" id="addModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
                aria-labelledby="staticBackdropLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="staticBackdropLabel">新增景點</h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                                v-on:click="closeAdd"></button>
                        </div>
                        <div class="modal-body">
                            <div class="row mb-1">
                                <label for="sightseeingName" class="col-sm-4">景點名稱 :</label>
                                <input id="sightseeingName" class="col-sm-5" type="text"
                                    v-model="addSightseeing.sightseeingName" placeholder="輸入景點名稱">
                            </div>
                            <div class="row mb-1">
                                <label for="sightseeingCountry" class="col-sm-4">景點國家 :</label>
                                <input id="sightseeingCountry" class="col-sm-5" type="text"
                                    v-model="addSightseeing.sightseeingCountry" placeholder="輸入管理員名稱">
                            </div>
                            <div class="row mb-1">
                                <label for="sightseeingCity" class="col-sm-4">景點城市 :</label>
                                <input id="sightseeingCity" class="col-sm-5" type="text"
                                    v-model="addSightseeing.sightseeingCity" placeholder="輸入景點國家">
                            </div>
                            <div class="row mb-1">
                                <label for="sightseeingAddress" class="col-sm-4">景點地址 :</label>
                                <input id="sightseeingAddress" class="col-sm-5" type="text"
                                    v-model="addSightseeing.sightseeingAddress" placeholder="輸入景點地址">
                            </div>
                            <div class="row mb-1">
                                <label for="sightseeingScore" class="col-sm-4">景點推薦度 :</label>
                                <input id="sightseeingScore" class="col-sm-5" type="text"
                                    v-model="addSightseeing.sightseeingScore" placeholder="輸入景點推薦度">
                            </div>
                            <div class="row mb-1">
                                <label for="sightseeingIntroduce" class="col-sm-4">景點介紹 :</label>
                                <textarea id="sightseeingIntroduce" class="col-sm-5" type="text"
                                    v-model="addSightseeing.sightseeingIntroduce" placeholder="輸入景點介紹"></textarea>
                            </div>
                            <div class="row mb-1">
                                <label for="sightseeingCategoryId" class="col-sm-4">景點種類 :</label>
                                <select name="sightseeingCategoryId" id="roles" class="col-sm-5"
                                    v-model="addSightseeing.sightseeingCategoryId">
                                    <option value="" disabled>請選擇</option>
                                    <option value="1">潛水</option>
                                    <option value="2">登山</option>
                                </select>
                            </div>
                            <div class="row mb-1">
                                <label for="sightseeingPictureInfos" class="col-sm-4">景點圖片上傳 :</label>
                                <input id="sightseeingPictureInfos" class="col-sm-5" type="file" ref="fileInput"
                                    v-on:change="uploadFile" placeholder="輸入景點介紹" multiple>
                            </div>
                            <div v-if="p" v-for="p in preview">
                                <img :src="p" width="100">
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
                                v-on:click="closeAdd">取消</button>
                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal"
                                v-on:click="createSightseeing">確認新增</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Modal Edit Sightseeing-->
            <div class="modal fade" id="editModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
                aria-labelledby="staticBackdropLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="staticBackdropLabel">修改景點</h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                                v-on:click="close"></button>
                        </div>
                        <div class="modal-body" v-if="editSightseeing != null">
                            <div class="row mb-1">
                                <label class="col-sm-4">景點編號 :</label>
                                <label class="col-sm-5">{{editSightseeing.sightseeingId}}</label>
                            </div>
                            <div class="row mb-1">
                                <label class="col-sm-4">景點推薦度 :</label>
                                <label class="col-sm-5">{{editSightseeing.sightseeingScore}}</label>

                            </div>
                            <div class="row mb-1">
                                <label for="editSightseeingName" class="col-sm-4">景點名稱 :</label>
                                <input id="editSightseeingName" class="col-sm-5" type="text"
                                    v-model="editSightseeing.sightseeingName" placeholder="輸入景點名稱">
                            </div>
                            <div class="row mb-1">
                                <label for="editSightseeingCountry" class="col-sm-4">景點國家 :</label>
                                <input id="editSightseeingCountry" class="col-sm-5" type="text"
                                    v-model="editSightseeing.sightseeingCountry" placeholder="輸入管理員名稱">
                            </div>
                            <div class="row mb-1">
                                <label for="editSightseeingCity" class="col-sm-4">景點城市 :</label>
                                <input id="editSightseeingCity" class="col-sm-5" type="text"
                                    v-model="editSightseeing.sightseeingCity" placeholder="輸入景點國家">
                            </div>
                            <div class="row mb-1">
                                <label for="editSightseeingAddress" class="col-sm-4">景點地址 :</label>
                                <input id="editSightseeingAddress" class="col-sm-5" type="text"
                                    v-model="editSightseeing.sightseeingAddress" placeholder="輸入景點地址">
                            </div>
                            <div class="row mb-1">
                                <label for="editSightseeingIntroduce" class="col-sm-4">景點介紹 :</label>
                                <textarea id="editSightseeingIntroduce" class="col-sm-5" type="text"
                                    v-model="editSightseeing.sightseeingIntroduce" placeholder="輸入景點介紹"></textarea>
                            </div>
                            <div class="row mb-1">
                                <label for="editSightseeingCategoryId" class="col-sm-4">景點種類 :</label>
                                <select name="editSightseeingCategoryId" id="roles" class="col-sm-5"
                                    v-model="editSightseeing.sightseeingCategoryId">
                                    <option value="" disabled>請選擇</option>
                                    <option value="1">潛水</option>
                                    <option value="2">登山</option>
                                </select>
                            </div>

                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
                                v-on:click="close">取消</button>
                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal"
                                v-on:click="editinfo">確認修改</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- /.card-body -->
    </div>
    <!-- /.card -->

</section>
<!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Scripts{

    <script>
        var VueSightPage = new Vue({
            el: "#VueSightPage",
            data: {
                sightseeings: [],
                addSightseeing: {
                    sightseeingName: '',
                    sightseeingCountry: '',
                    sightseeingCity: '',
                    sightseeingAddress: '',
                    sightseeingScore: '',
                    sightseeingIntroduce: '',
                    sightseeingCategoryId: '',
                    files: null,
                },
                editSightseeing: null,
                homeVisible: true,
                ErrMsg: '',
                Success: '',
                currentPage: 1,
                pageSize: 10,
                pageVisible: true,
                preview: null,

            },
            mounted: function () {
                this.getAllSight();
            },
            computed: {
                selectedItems() {
                    return this.sightseeings.filter(p => p.sightseeingHomePage == "0")
                },
                totalPages() {
                    const total = Math.ceil(this.sightseeings.length / this.pageSize)
                    if (total === 1) {
                        this.pageVisible = false;
                    }
                    return total;
                },
                sightseeingByPage() {
                    const startIndex = (this.currentPage - 1) * this.pageSize;
                    const endIndex = startIndex + this.pageSize;
                    return this.sightseeings.slice(startIndex, endIndex);
                },
            },
            methods: {
                prevPage() {
                    if (this.currentPage > 1) {
                        this.changePage(this.currentPage - 1);
                    }
                },
                nextPage() {
                    if (this.currentPage < this.totalPages) {
                        this.changePage(this.currentPage + 1);
                    }
                },
                changePage(page) {
                    this.currentPage = page;
                },
                home: function () {
                    this.homeVisible = false;
                },
                closeHome: function () {
                    this.homeVisible = true;
                },
                confirmHome: function () {
                    var self = this;
                    self.editSightseeing = self.selectedItems.map(p => p.sightseeingId);
                    axios({
                        method: 'put',
                        url: '/Administrators/AdministratorApi/UpdateSightHome',
                        data: self.editSightseeing,
                    })
                        .then(function (res) {
                            console.log(res);
                            self.Success = res.data;
                            self.editSightseeing = null;
                            self.homeVisible = true;
                            Swal.fire({
                                title: self.Success,
                                icon: 'success',
                                timer: 12000
                            });
                        })
                        .catch(function (error) {
                            console.log(error);
                            self.ErrMsg = error.response.data;
                            Swal.fire({
                                title: '設定失敗',
                                text: self.ErrMsg,
                                icon: 'error',
                                timer: 12000
                            });
                        });

                },
                getAllSight: function () {
                    var self = this;
                    axios({
                        method: 'get',
                        url: '/Administrators/AdministratorApi/GetAllSightseeings'
                    })
                        .then(function (res) {
                            console.log(res);
                            self.sightseeings = res.data;
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                },
                uploadFile() {
                    this.addSightseeing.files = this.$refs.fileInput.files;
                    const file = Array.from(this.addSightseeing.files);
                    this.preview = file.map(x => URL.createObjectURL(x));
                },
                createSightseeing: function () {
                    var self = this;
                    const formData = new FormData();
                    formData.append('request', this.addSightseeing);
                    axios({
                        method: 'post',
                        url: '/Administrators/AdministratorApi/AddSight',
                        data: formData,
                    })
                        .then(function (res) {
                            console.log(res);
                            self.Success = res.data;
                            self.getAllSight();
                            self.addSightseeing = {
                                sightseeingName: '',
                                sightseeingCountry: '',
                                sightseeingCity: '',
                                sightseeingAddress: '',
                                sightseeingScore: '',
                                sightseeingIntroduce: '',
                                sightseeingCategoryId: '',
                                files: null,
                            };
                            self.preview = null;
                            document.querySelector("#sightseeingPictureInfos").value = null;
                            Swal.fire({
                                title: self.Success,
                                icon: 'success',
                                timer: 12000
                            });

                        })
                        .catch(function (error) {
                            console.log(error);
                            self.ErrMsg = error.response.data.errors;
                            var message = Object.values(error.response.data.errors).join('<br>');
                            Swal.fire({
                                title: '新增失敗',
                                text: `${message}`,
                                icon: 'error',
                                timer: 12000
                            });

                        });

                },
                editModal: function (request) {
                    this.editSightseeing = { ...request };
                },
                editinfo: function () {
                    var self = this;
                    axios({
                        method: 'put',
                        url: `/Administrators/AdministratorApi/UpdateSight/${self.editSightseeing.sightseeingId}`,
                        data: self.editSightseeing,
                    })
                        .then(function (res) {
                            console.log(res);
                            self.Success = res.data;
                            const index = self.sightseeings.findIndex(s => s.sightseeingId === self.editSightseeing.sightseeingId);
                            self.sightseeings.splice(index, 1, self.editSightseeing);
                            self.editSightseeing = null;
                            Swal.fire({
                                title: self.Success,
                                icon: 'success',
                                timer: 12000
                            });
                        })
                        .catch(function (error) {
                            console.log(error);
                            self.ErrMsg = error.response.data.errors;
                            var message = Object.values(error.response.data.errors).join('<br>');
                            Swal.fire({
                                title: '修改失敗',
                                text: `${message}`,
                                icon: 'error',
                                timer: 12000
                            });
                        });

                },
                close: function () {
                    this.editSightseeing = null;
                },
                closeAdd: function () {
                    this.addSightseeing = {
                        sightseeingName: '',
                        sightseeingCountry: '',
                        sightseeingCity: '',
                        sightseeingAddress: '',
                        sightseeingScore: '',
                        sightseeingIntroduce: '',
                        sightseeingCategoryId: '',
                        files: null,
                    };
                    this.preview = null;
                    document.querySelector("#sightseeingPictureInfos").value = null;
                },
                deleteInfo: function (request) {
                    var self = this;
                    Swal.fire({
                        title: '確認要刪除?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: '是的, 刪除!',
                        cancelButtonText: '取消!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            axios({
                                method: 'delete',
                                url: `/Administrators/AdministratorApi/DeleteSight/${request.SightseeingId}`
                            }).then(function (res) {
                                console.log(res);
                                const index = self.sightseeings.findIndex(s => s.SightseeingId === request.SightseeingId);
                                self.sightseeings.splice(index, 1);
                            })
                                .catch(function (error) {
                                    console.log(error);
                                });
                            Swal.fire(
                                '刪除!',
                                '資料已刪除.',
                                'success'
                            );
                        }
                    })
                }
            }
        });

    </script>
}


